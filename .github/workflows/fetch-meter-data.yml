name: Fetch Meter Data

on:
  schedule:
    # Executa a cada hora (0 minutos de cada hora)
    - cron: '0 * * * *'
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Debug Environment
      run: |
        echo "üîç Informa√ß√µes do ambiente:"
        echo "Date: $(date)"
        echo "Timezone: $(date +%Z)"
        echo "Runner OS: ${{ runner.os }}"
        echo "GitHub Event: ${{ github.event_name }}"
        
    - name: Check Secrets
      run: |
        echo "üîê Verificando secrets..."
        
        # Verificar se os secrets existem (sem expor valores)
        if [ -n "${{ secrets.VERCEL_URL }}" ]; then
          echo "‚úÖ VERCEL_URL est√° configurado"
          # Mostrar apenas o dom√≠nio (sem protocolo)
          echo "üåê Dom√≠nio: $(echo '${{ secrets.VERCEL_URL }}' | sed 's|https\?://||')"
        else
          echo "‚ùå VERCEL_URL n√£o est√° configurado"
          echo "üí° Configure em: Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        if [ -n "${{ secrets.CRON_SECRET }}" ]; then
          echo "‚úÖ CRON_SECRET est√° configurado"
        else
          echo "‚ùå CRON_SECRET n√£o est√° configurado"
          echo "üí° Configure em: Settings > Secrets and variables > Actions"
          exit 1
        fi
        
    - name: Test Basic Connectivity
      run: |
        echo "üåê Testando conectividade b√°sica..."
        
        # Extrair apenas o dom√≠nio da URL
        DOMAIN=$(echo '${{ secrets.VERCEL_URL }}' | sed 's|https\?://||' | sed 's|/.*||')
        echo "üîó Testando conex√£o com: $DOMAIN"
        
        # Teste de ping b√°sico
        if ping -c 1 "$DOMAIN" >/dev/null 2>&1; then
          echo "‚úÖ Ping para $DOMAIN: OK"
        else
          echo "‚ö†Ô∏è Ping para $DOMAIN: FALHOU (pode ser normal se ICMP estiver bloqueado)"
        fi
        
        # Teste de resolu√ß√£o DNS
        if nslookup "$DOMAIN" >/dev/null 2>&1; then
          echo "‚úÖ Resolu√ß√£o DNS: OK"
        else
          echo "‚ùå Resolu√ß√£o DNS: FALHOU"
          exit 1
        fi
        
    - name: Test API Health
      run: |
        echo "üè• Testando sa√∫de da API..."
        
        # Construir URL completa
        if [[ "${{ secrets.VERCEL_URL }}" == https://* ]]; then
          BASE_URL="${{ secrets.VERCEL_URL }}"
        else
          BASE_URL="https://${{ secrets.VERCEL_URL }}"
        fi
        
        echo "üîó URL base: $BASE_URL"
        
        # Testar endpoint de health
        echo "üîç Testando /api/health..."
        
        HEALTH_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          --connect-timeout 10 \
          --max-time 20 \
          "$BASE_URL/api/health" || echo "HTTPSTATUS:ERROR")
        
        HTTP_CODE=$(echo "$HEALTH_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$HEALTH_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
        
        echo "üìä Health check - C√≥digo: $HTTP_CODE"
        echo "üìã Resposta: $RESPONSE_BODY"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ API est√° saud√°vel"
        else
          echo "‚ö†Ô∏è API health check falhou com c√≥digo: $HTTP_CODE"
          # N√£o falhar aqui, apenas avisar
        fi
        
    - name: Fetch Meter Data (Simple)
      run: |
        echo "üöÄ Executando coleta de dados (vers√£o simples)..."
        
        # Construir URL completa
        if [[ "${{ secrets.VERCEL_URL }}" == https://* ]]; then
          BASE_URL="${{ secrets.VERCEL_URL }}"
        else
          BASE_URL="https://${{ secrets.VERCEL_URL }}"
        fi
        
        API_URL="$BASE_URL/api/cron/fetch-meter-data"
        echo "üéØ Endpoint: $API_URL"
        
        # Fazer a requisi√ß√£o com curl simples
        echo "üì° Fazendo requisi√ß√£o..."
        
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          --connect-timeout 15 \
          --max-time 60 \
          -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -H "User-Agent: GitHub-Actions/1.0" \
          -X GET \
          "$API_URL" || echo "HTTPSTATUS:ERROR")
        
        # Extrair c√≥digo HTTP e corpo da resposta
        HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
        
        echo "üìä C√≥digo HTTP: $HTTP_CODE"
        echo "üìã Resposta (primeiros 1000 chars):"
        echo "${RESPONSE_BODY:0:1000}"
        
        # Verificar resultado
        case "$HTTP_CODE" in
          "200")
            echo "‚úÖ Coleta executada com sucesso!"
            
            # Tentar extrair informa√ß√µes da resposta se for JSON
            if echo "$RESPONSE_BODY" | grep -q '"success"'; then
              echo "üìà Resposta cont√©m dados de sucesso"
            fi
            ;;
          "401")
            echo "‚ùå Erro de autoriza√ß√£o (401)"
            echo "üí° Verifique se CRON_SECRET est√° correto"
            exit 1
            ;;
          "404")
            echo "‚ùå Endpoint n√£o encontrado (404)"
            echo "üí° Verifique se a URL est√° correta: $API_URL"
            exit 1
            ;;
          "500")
            echo "‚ùå Erro interno do servidor (500)"
            echo "üîç Verifique os logs da Vercel para mais detalhes"
            exit 1
            ;;
          "ERROR")
            echo "‚ùå Erro de conex√£o"
            echo "üîç Poss√≠vel timeout ou problema de rede"
            exit 1
            ;;
          *)
            echo "‚ö†Ô∏è C√≥digo HTTP inesperado: $HTTP_CODE"
            echo "üîç Resposta: $RESPONSE_BODY"
            exit 1
            ;;
        esac
        
    - name: Execution Summary
      if: always()
      run: |
        echo "üìä Resumo da Execu√ß√£o:"
        echo "‚è∞ Finalizado em: $(date)"
        echo "üîß Workflow: ${{ github.workflow }}"
        echo "üåç Evento: ${{ github.event_name }}"
        echo "üìç Ref: ${{ github.ref }}"
        echo "üèÉ Runner: ${{ runner.os }}"
        
        # Status do job
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Status: SUCESSO"
        else
          echo "‚ùå Status: FALHA"
          echo "üîó Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
